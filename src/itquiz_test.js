import React, { useState, useEffect, useRef } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Animated, Modal, Image, Linking } from 'react-native';
import { useNavigation } from '@react-navigation/native';

const questions = [
  {
    question: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
    options: ['–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–ö–æ–º–ø–∏–ª—è—Ü–∏—è', '–¶–∏–∫–ª—ã'],
    answer: 0,
  },
  {
    question: '–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –ò–ò?',
    options: ['–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏—è', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å'],
    answer: 1,
  },
  {
    question: '–ö–∞–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö?',
    options: ['–î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π', '–†–µ–≥—Ä–µ—Å—Å–∏—è', '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥', '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä'],
    answer: 3,
  },
  {
    question: '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥–µ–ª—å LM?',
    options: ['–£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π', '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', '–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç', '–ö–æ–º–ø—Ä–µ—Å—Å–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ'],
    answer: 2,
  },
  {
    question: '–ö–∞–∫–æ–π —è–∑—ã–∫ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ML?',
    options: ['Python', 'C++', 'Java', 'HTML'],
    answer: 0,
  },
  {
    question: '–ö–∞–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —è–¥—Ä–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏?',
    options: ['–ë—Ä–∞—É–∑–µ—Ä', '–°–µ—Ä–≤–µ—Ä', '–ù–µ–π—Ä–æ–Ω', '–§–∞–π–ª'],
    answer: 2,
  },
  {
    question: '–ß—Ç–æ —Ç–∞–∫–æ–µ overfitting?',
    options: ['–•–æ—Ä–æ—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ', '–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö', '–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ', '–ù–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ'],
    answer: 2,
  },
  {
    question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–π, "–ø–æ–Ω–∏–º–∞—é—â–∏–π" –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ Transformer?',
    options: ['Dropout', 'Normalization', 'Self-Attention', 'Pooling'],
    answer: 2,
  },
  {
    question: 'GPT ‚Äî —ç—Ç–æ:',
    options: ['–°–µ—Ä–≤–µ—Ä', '–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', '–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å', '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è'],
    answer: 2,
  },
  {
    question: '–ö–∞–∫–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ò–ò –æ—Ç OpenAI?',
    options: ['TensorFlow', 'Torch', 'Keras', 'GPT'],
    answer: 3,
  },
];

const QuizScreen = () => {
  const navigation = useNavigation();
  const [current, setCurrent] = useState(0);
  const [correct, setCorrect] = useState(0);
  const [selected, setSelected] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [win, setWin] = useState(false);
  const [timer, setTimer] = useState(30);
  const fadeAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    animateCard();
    const interval = setInterval(() => {
      setTimer((prev) => {
        if (prev <= 1) {
          handleNext(null);
          return 30;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(interval);
  }, [current]);

  const animateCard = () => {
    fadeAnim.setValue(0);
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 300,
      useNativeDriver: true,
    }).start();
  };

  const handleNext = (option) => {
    if (option === questions[current].answer) {
      setCorrect((prev) => prev + 1);
    }
    setSelected(null);
    if (current + 1 < questions.length) {
      setCurrent(current + 1);
      setTimer(30);
    } else {
      setShowModal(true);
      setWin(correct + (option === questions[current].answer ? 1 : 0) >= 7);
    }
  };

  const restart = () => {
    setCurrent(0);
    setCorrect(0);
    setSelected(null);
    setTimer(30);
    setShowModal(false);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.timer}>‚è± {timer} —Å–µ–∫</Text>
      <Animated.View style={{ opacity: fadeAnim }}>
        <Text style={styles.question}>{questions[current].question}</Text>
        {questions[current].options.map((opt, idx) => (
          <TouchableOpacity
            key={idx}
            style={[
              styles.option,
              selected === idx && { backgroundColor: '#ccc' },
            ]}
            onPress={() => {
              setSelected(idx);
              setTimeout(() => handleNext(idx), 300);
            }}
          >
            <Text style={styles.optionText}>{opt}</Text>
          </TouchableOpacity>
        ))}
      </Animated.View>

      <Modal visible={showModal} animationType="slide" transparent>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>{win ? 'üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!' : 'üòû –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}</Text>
            {win && (
              <Image source={require('../assets/qr-code.gif')} style={styles.logo} />
            )}
            <TouchableOpacity
              style={styles.modalButton}
              onPress={() => {
                if (win) {
                  Linking.openURL('https://github.com/RostAgroDevTeam/RegulaSearch');
                } else {
                  restart();
                }
              }}
            >
              <Text style={styles.modalButtonText}>{win ? '–ü–µ—Ä–µ–π—Ç–∏' : '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞'}</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#0f172a',
    flex: 1,
    justifyContent: 'center',
  },
  timer: {
    fontSize: 18,
    color: 'white',
    textAlign: 'right',
    marginBottom: 10,
  },
  question: {
    color: 'white',
    fontSize: 20,
    marginBottom: 20,
  },
  option: {
    backgroundColor: '#1e293b',
    padding: 15,
    borderRadius: 10,
    marginVertical: 8,
  },
  optionText: {
    color: 'white',
    fontSize: 16,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#f1f5f9',
    padding: 30,
    borderRadius: 20,
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 22,
    marginBottom: 15,
    color: '#0f172a',
  },
  modalButton: {
    backgroundColor: '#0f172a',
    padding: 12,
    borderRadius: 10,
    marginTop: 20,
    width: 200,
  },
  modalButtonText: {
    color: 'white',
    textAlign: 'center',
    fontSize: 16,
  },
  logo: {
    height: 100,
    width: 100,
    marginTop: 10,
  },
});

export default QuizScreen;
